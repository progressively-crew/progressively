// RULE NÂ°1: no database specific attributes / behaviours.
// If you need enums, use a string and define the enum in a TS file
// Make the check at the code level, not at the DB level

generator client {
  provider   = "prisma-client-js"
  engineType = "binary"
}

datasource POSTGRES_DATASOURCE {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model UserOfProvider {
  uuid     String  @id
  provider String
  userUuid String?
  User     User?   @relation(fields: [userUuid], references: [uuid])
}

model User {
  uuid                String                @id @default(uuid())
  fullname            String
  email               String                @unique
  password            String
  activationToken     String?
  status              String
  PasswordResetTokens PasswordResetTokens[]
  RefreshToken        RefreshToken[]
  authProviders       UserOfProvider[]
  userProject         UserProject[]
  ActivityLog         ActivityLog[]
  StripeOrder         StripeOrder[]
}

model Project {
  uuid        String        @id @default(uuid())
  createdAt   DateTime?     @default(now())
  name        String
  userProject UserProject[]
  Funnel      Funnel[]
  Flag        Flag[]
  clientKey   String        @default(uuid())
  secretKey   String        @default(uuid())
  domain      String?
  credits     Int           @default(0)
  Session     Session[]
  StripeOrder StripeOrder[]
  EventUsage  EventUsage[]
}

model UserProject {
  userId    String
  projectId String
  role      String
  project   Project @relation(fields: [projectId], references: [uuid])
  user      User    @relation(fields: [userId], references: [uuid])

  @@id([userId, projectId])
}

model RefreshToken {
  id      Int      @id @default(autoincrement())
  userId  String
  expired DateTime
  value   String
  user    User     @relation(fields: [userId], references: [uuid])
}

model PasswordResetTokens {
  uuid     String   @id @default(uuid())
  dateEnd  DateTime
  token    String
  userUuid String
  user     User     @relation(fields: [userUuid], references: [uuid])
}

model Flag {
  uuid        String        @id @default(uuid())
  name        String
  key         String
  description String?
  createdAt   DateTime?     @default(now())
  status      String?       @default("NOT_ACTIVATED")
  FunnelEntry FunnelEntry[]
  variants    Variant[]
  webhooks    Webhook[]
  activityLog ActivityLog[]
  strategies  Strategy[]
  Project     Project?      @relation(fields: [projectUuid], references: [uuid])
  projectUuid String?
}

model Funnel {
  uuid          String        @id @default(uuid())
  name          String
  createdAt     DateTime?     @default(now())
  funnelEntries FunnelEntry[]
  Project       Project?      @relation(fields: [projectUuid], references: [uuid])
  projectUuid   String?
}

model FunnelEntry {
  uuid        String  @id @default(uuid())
  flag        Flag?   @relation(fields: [flagUuid], references: [uuid])
  flagUuid    String?
  flagVariant String?
  eventName   String?
  eventValue  String?
  Funnel      Funnel  @relation(fields: [funnelUuid], references: [uuid])
  funnelUuid  String
}

model Webhook {
  uuid      String    @id @default(uuid())
  endpoint  String
  secret    String
  event     String
  createdAt DateTime? @default(now())
  Flag      Flag?     @relation(fields: [flagUuid], references: [uuid])
  flagUuid  String?
}

model Variant {
  uuid            String            @id @default(uuid())
  isControl       Boolean
  value           String
  StrategyVariant StrategyVariant[]
  createdAt       DateTime?         @default(now())
  Flag            Flag?             @relation(fields: [flagUuid], references: [uuid])
  flagUuid        String?
}

model Session {
  uuid        String   @id @default(uuid())
  startedAt   DateTime @default(now())
  visitorId   String
  Project     Project  @relation(fields: [projectUuid], references: [uuid])
  projectUuid String
}

model Rule {
  uuid            String    @id @default(uuid())
  fieldName       String?
  fieldComparator String?
  fieldValue      String?
  Strategy        Strategy? @relation(fields: [strategyUuid], references: [uuid])
  strategyUuid    String?
  createdAt       DateTime? @default(now())
}

model ActivityLog {
  id              Int      @id @default(autoincrement())
  utc             DateTime @default(now())
  type            String
  concernedEntity String
  user            User     @relation(fields: [userUuid], references: [uuid])
  userUuid        String
  data            String?
  Flag            Flag?    @relation(fields: [flagUuid], references: [uuid])
  flagUuid        String?
}

model Strategy {
  uuid              String            @id @default(uuid())
  rolloutPercentage Int               @default(100)
  valueToServeType  String
  valueToServe      String?
  rules             Rule[]
  variants          StrategyVariant[]
  createdAt         DateTime?         @default(now())
  Flag              Flag?             @relation(fields: [flagUuid], references: [uuid])
  flagUuid          String?
  whenPredicate     WhenPredicate     @default(ALWAYS)
  whenTimestamp     DateTime?
}

model StrategyVariant {
  rolloutPercentage Int      @default(0)
  variant           Variant  @relation(fields: [variantUuid], references: [uuid])
  variantUuid       String
  strategy          Strategy @relation(fields: [strategyUuid], references: [uuid])
  strategyUuid      String

  @@id([strategyUuid, variantUuid])
}

model StripeOrder {
  uuid            String    @id @default(uuid())
  stripeSessionId String
  createdAt       DateTime? @default(now())
  itemId          String
  quantity        Int
  total           Int
  project         Project   @relation(fields: [projectUuid], references: [uuid])
  user            User      @relation(fields: [userUuid], references: [uuid])
  projectUuid     String
  userUuid        String
  status          String
  updatedAt       DateTime? @default(now())
}

model EventUsage {
  project     Project @relation(fields: [projectUuid], references: [uuid])
  projectUuid String  @id
  eventsCount Int
}

enum WhenPredicate {
  ALWAYS
  AFTER_THE
  UNTIL_THE
}
