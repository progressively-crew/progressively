// RULE NÂ°1: no database specific attributes / behaviours.
// If you need enums, use a string and define the enum in a TS file
// Make the check at the code level, not at the DB level

generator client {
  provider   = "prisma-client-js"
  engineType = "binary"
}

datasource POSTGRES_DATASOURCE {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model UserOfProvider {
  uuid     String  @id
  provider String
  userUuid String?
  User     User?   @relation(fields: [userUuid], references: [uuid])
}

model User {
  uuid                String                @id @default(uuid())
  fullname            String
  email               String                @unique
  password            String
  activationToken     String?
  status              String
  PasswordResetTokens PasswordResetTokens[]
  RefreshToken        RefreshToken[]
  authProviders       UserOfProvider[]
  userProject         UserProject[]
  ActivityLog         ActivityLog[]
}

model Project {
  uuid         String        @id @default(uuid())
  createdAt    DateTime      @default(now())
  name         String
  environments Environment[]
  userProject  UserProject[]
}

model UserProject {
  userId    String
  projectId String
  role      String
  project   Project @relation(fields: [projectId], references: [uuid])
  user      User    @relation(fields: [userId], references: [uuid])

  @@id([userId, projectId])
}

model Environment {
  uuid            String            @id @default(uuid())
  name            String
  projectId       String
  clientKey       String            @default(uuid())
  project         Project           @relation(fields: [projectId], references: [uuid])
  flagEnvironment FlagEnvironment[]
}

model RefreshToken {
  id      Int      @id @default(autoincrement())
  userId  String
  expired DateTime
  value   String
  user    User     @relation(fields: [userId], references: [uuid])
}

model PasswordResetTokens {
  uuid     String   @id @default(uuid())
  dateEnd  DateTime
  token    String
  userUuid String
  user     User     @relation(fields: [userUuid], references: [uuid])
}

model Flag {
  uuid            String            @id @default(uuid())
  name            String
  key             String
  description     String
  createdAt       DateTime          @default(now())
  flagEnvironment FlagEnvironment[]
}

model FlagEnvironment {
  flagId            String
  environmentId     String
  status            String?           @default("NOT_ACTIVATED")
  rolloutPercentage Int               @default(100)
  eligibilities     Eligibility[]
  environment       Environment       @relation(fields: [environmentId], references: [uuid])
  flag              Flag              @relation(fields: [flagId], references: [uuid])
  flagHit           FlagHit[]
  metrics           PMetric[]
  metricHits        PMetricHit[]
  strategies        RolloutStrategy[]
  scheduling        Schedule[]
  variants          Variant[]
  webhooks          Webhook[]
  ActivityLog       ActivityLog[]

  @@id([flagId, environmentId])
}

model Webhook {
  uuid                         String           @id @default(uuid())
  endpoint                     String
  secret                       String
  event                        String
  flagEnvironmentFlagId        String?
  flagEnvironmentEnvironmentId String?
  flagEnvironment              FlagEnvironment? @relation(fields: [flagEnvironmentFlagId, flagEnvironmentEnvironmentId], references: [flagId, environmentId])
}

model Variant {
  uuid                         String           @id @default(uuid())
  rolloutPercentage            Int              @default(100)
  isControl                    Boolean
  value                        String
  flagEnvironmentFlagId        String?
  flagEnvironmentEnvironmentId String?
  PMetric                      PMetric[]
  flagEnvironment              FlagEnvironment? @relation(fields: [flagEnvironmentFlagId, flagEnvironmentEnvironmentId], references: [flagId, environmentId])
}

model PMetric {
  uuid                         String           @id @default(uuid())
  name                         String
  flagEnvironmentFlagId        String?
  flagEnvironmentEnvironmentId String?
  variantUuid                  String?
  flagEnvironment              FlagEnvironment? @relation(fields: [flagEnvironmentFlagId, flagEnvironmentEnvironmentId], references: [flagId, environmentId])
  variant                      Variant?         @relation(fields: [variantUuid], references: [uuid])
  PMetricHit                   PMetricHit[]
}

model PMetricHit {
  id                           Int              @id @default(autoincrement())
  date                         DateTime         @default(now())
  data                         String?
  flagEnvironmentFlagId        String?
  flagEnvironmentEnvironmentId String?
  pMetricUuid                  String
  visitorId                    String
  flagEnvironment              FlagEnvironment? @relation(fields: [flagEnvironmentFlagId, flagEnvironmentEnvironmentId], references: [flagId, environmentId])
  metric                       PMetric          @relation(fields: [pMetricUuid], references: [uuid])
}

model FlagHit {
  id                           Int             @id @default(autoincrement())
  date                         DateTime        @default(now())
  flagEnvironmentFlagId        String
  flagEnvironmentEnvironmentId String
  valueResolved                String
  visitorId                    String
  flagEnvironment              FlagEnvironment @relation(fields: [flagEnvironmentFlagId, flagEnvironmentEnvironmentId], references: [flagId, environmentId])
}

model RolloutStrategy {
  uuid                         String           @id @default(uuid())
  fieldName                    String
  fieldComparator              String
  fieldValue                   String
  valueToServeType             String
  valueToServe                 String
  flagEnvironmentFlagId        String?
  flagEnvironmentEnvironmentId String?
  flagEnvironment              FlagEnvironment? @relation(fields: [flagEnvironmentFlagId, flagEnvironmentEnvironmentId], references: [flagId, environmentId])
}

model Eligibility {
  uuid                         String           @id @default(uuid())
  fieldName                    String
  fieldComparator              String
  fieldValue                   String
  flagEnvironmentFlagId        String?
  flagEnvironmentEnvironmentId String?
  flagEnvironment              FlagEnvironment? @relation(fields: [flagEnvironmentFlagId, flagEnvironmentEnvironmentId], references: [flagId, environmentId])
}

model Schedule {
  uuid                         String           @id @default(uuid())
  type                         String
  data                         Json
  utc                          DateTime
  status                       String
  schedulingStatus             String           @default("NOT_RUN")
  flagEnvironmentFlagId        String?
  flagEnvironmentEnvironmentId String?
  flagEnvironment              FlagEnvironment? @relation(fields: [flagEnvironmentFlagId, flagEnvironmentEnvironmentId], references: [flagId, environmentId])
}

model ActivityLog {
  id              Int      @id @default(autoincrement())
  utc             DateTime @default(now())
  type            String
  concernedEntity String

  user     User   @relation(fields: [userUuid], references: [uuid])
  userUuid String

  flagEnv                      FlagEnvironment? @relation(fields: [flagEnvironmentFlagId, flagEnvironmentEnvironmentId], references: [flagId, environmentId])
  flagEnvironmentFlagId        String?
  flagEnvironmentEnvironmentId String?

  data String?
}
