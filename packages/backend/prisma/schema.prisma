// *** DO NOT EDIT. GENERATED BY PRISMIX. ***
datasource POSTGRES_DATASOURCE {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  uuid                String                @id @default(uuid())
  fullname            String
  email               String                @unique
  password            String
  userProject         UserProject[]         @relation(name: "UserToUserProject")
  activationToken     String?
  status              String
  RefreshToken        RefreshToken[]        @relation(name: "RefreshTokenToUser")
  PasswordResetTokens PasswordResetTokens[] @relation(name: "PasswordResetTokensToUser")
}

model Project {
  uuid         String        @id @default(uuid())
  createdAt    DateTime      @default(now())
  name         String
  environments Environment[] @relation(name: "EnvironmentToProject")
  userProject  UserProject[] @relation(name: "ProjectToUserProject")
}

model UserProject {
  user      User    @relation(name: "UserToUserProject", fields: [userId], references: [uuid])
  userId    String
  project   Project @relation(name: "ProjectToUserProject", fields: [projectId], references: [uuid])
  projectId String
  role      String

  @@id([userId, projectId])
}

model Environment {
  uuid            String            @id @default(uuid())
  name            String
  project         Project           @relation(name: "EnvironmentToProject", fields: [projectId], references: [uuid])
  projectId       String
  clientKey       String            @default(uuid())
  flagEnvironment FlagEnvironment[] @relation(name: "EnvironmentToFlagEnvironment")
}

model RefreshToken {
  id      Int      @id @default(autoincrement())
  user    User     @relation(name: "RefreshTokenToUser", fields: [userId], references: [uuid])
  userId  String
  expired DateTime
  value   String
}

model PasswordResetTokens {
  uuid     String   @id @default(uuid())
  dateEnd  DateTime
  token    String
  user     User     @relation(name: "PasswordResetTokensToUser", fields: [userUuid], references: [uuid])
  userUuid String
}

model Flag {
  uuid            String            @id @default(uuid())
  name            String
  key             String
  description     String
  createdAt       DateTime          @default(now())
  flagEnvironment FlagEnvironment[] @relation(name: "FlagToFlagEnvironment")
  type            String
}

model FlagEnvironment {
  flag              Flag              @relation(name: "FlagToFlagEnvironment", fields: [flagId], references: [uuid])
  flagId            String
  environment       Environment       @relation(name: "EnvironmentToFlagEnvironment", fields: [environmentId], references: [uuid])
  environmentId     String
  flagHit           FlagHit[]         @relation(name: "FlagEnvironmentToFlagHit")
  status            String?           @default("NOT_ACTIVATED")
  strategies        RolloutStrategy[] @relation(name: "FlagEnvironmentToRolloutStrategy")
  rolloutPercentage Int               @default(100)
  scheduling        Schedule[]        @relation(name: "FlagEnvironmentToSchedule")
  variants          Variant[]         @relation(name: "FlagEnvironmentToVariant")
  metrics           PMetric[]         @relation(name: "FlagEnvironmentToPMetric")
  metricHits        PMetricHit[]      @relation(name: "FlagEnvironmentToPMetricHit")
  webhooks          Webhook[]         @relation(name: "FlagEnvironmentToWebhook")
  eligibilities     Eligibility[]     @relation(name: "EligibilityToFlagEnvironment")

  @@id([flagId, environmentId])
}

model Webhook {
  uuid                         String           @id @default(uuid())
  endpoint                     String
  secret                       String
  event                        String
  FlagEnvironment              FlagEnvironment? @relation(name: "FlagEnvironmentToWebhook", fields: [flagEnvironmentFlagId, flagEnvironmentEnvironmentId], references: [flagId, environmentId])
  flagEnvironmentFlagId        String?
  flagEnvironmentEnvironmentId String?
}

model Variant {
  uuid                         String           @id @default(uuid())
  rolloutPercentage            Int              @default(100)
  isControl                    Boolean
  value                        String
  FlagEnvironment              FlagEnvironment? @relation(name: "FlagEnvironmentToVariant", fields: [flagEnvironmentFlagId, flagEnvironmentEnvironmentId], references: [flagId, environmentId])
  flagEnvironmentFlagId        String?
  flagEnvironmentEnvironmentId String?
  PMetric                      PMetric[]        @relation(name: "PMetricToVariant")
  FlagHit                      FlagHit[]        @relation(name: "FlagHitToVariant")
}

model PMetric {
  uuid                         String           @id @default(uuid())
  name                         String
  FlagEnvironment              FlagEnvironment? @relation(name: "FlagEnvironmentToPMetric", fields: [flagEnvironmentFlagId, flagEnvironmentEnvironmentId], references: [flagId, environmentId])
  flagEnvironmentFlagId        String?
  flagEnvironmentEnvironmentId String?
  PMetricHit                   PMetricHit[]     @relation(name: "PMetricToPMetricHit")
  variant                      Variant?         @relation(name: "PMetricToVariant", fields: [variantUuid], references: [uuid])
  variantUuid                  String?
}

model PMetricHit {
  id                           Int              @id @default(autoincrement())
  date                         DateTime         @default(now())
  data                         String?
  FlagEnvironment              FlagEnvironment? @relation(name: "FlagEnvironmentToPMetricHit", fields: [flagEnvironmentFlagId, flagEnvironmentEnvironmentId], references: [flagId, environmentId])
  flagEnvironmentFlagId        String?
  flagEnvironmentEnvironmentId String?
  metric                       PMetric          @relation(name: "PMetricToPMetricHit", fields: [pMetricUuid], references: [uuid])
  pMetricUuid                  String
  visitorId                    String
}

model FlagHit {
  id                           Int             @id @default(autoincrement())
  date                         DateTime        @default(now())
  flagEnvironment              FlagEnvironment @relation(name: "FlagEnvironmentToFlagHit", fields: [flagEnvironmentFlagId, flagEnvironmentEnvironmentId], references: [flagId, environmentId])
  flagEnvironmentFlagId        String
  flagEnvironmentEnvironmentId String
  status                       String
  variant                      Variant?        @relation(name: "FlagHitToVariant", fields: [variantUuid], references: [uuid])
  variantUuid                  String?
  visitorId                    String
}

model RolloutStrategy {
  uuid                         String           @id @default(uuid())
  name                         String
  fieldName                    String
  fieldComparator              String
  fieldValue                   String
  FlagEnvironment              FlagEnvironment? @relation(name: "FlagEnvironmentToRolloutStrategy", fields: [flagEnvironmentFlagId, flagEnvironmentEnvironmentId], references: [flagId, environmentId])
  flagEnvironmentFlagId        String?
  flagEnvironmentEnvironmentId String?
}

model Eligibility {
  uuid                         String           @id @default(uuid())
  fieldName                    String
  fieldComparator              String
  fieldValue                   String
  FlagEnvironment              FlagEnvironment? @relation(name: "EligibilityToFlagEnvironment", fields: [flagEnvironmentFlagId, flagEnvironmentEnvironmentId], references: [flagId, environmentId])
  flagEnvironmentFlagId        String?
  flagEnvironmentEnvironmentId String?
}

model Schedule {
  uuid                         String           @id @default(uuid())
  utc                          DateTime
  rolloutPercentage            Int
  status                       String
  FlagEnvironment              FlagEnvironment? @relation(name: "FlagEnvironmentToSchedule", fields: [flagEnvironmentFlagId, flagEnvironmentEnvironmentId], references: [flagId, environmentId])
  schedulingStatus             String           @default("NOT_RUN")
  flagEnvironmentFlagId        String?
  flagEnvironmentEnvironmentId String?
}
