model Flag {
    uuid            String            @id @default(uuid())
    name            String
    key             String
    description     String
    createdAt       DateTime          @default(now())
    flagEnvironment FlagEnvironment[]
    type            String
}

model FlagEnvironment {
    flag              Flag              @relation(fields: [flagId], references: [uuid])
    flagId            String
    environment       Environment       @relation(fields: [environmentId], references: [uuid])
    environmentId     String
    flagHit           FlagHit[]
    // the values set in flags/flag.status.ts
    status            String?           @default("NOT_ACTIVATED")
    strategies        RolloutStrategy[]
    rolloutPercentage Int               @default(100)

    scheduling Schedule[]
    variants   Variant[]
    metrics    PMetric[]
    metricHits PMetricHit[]

    @@id([flagId, environmentId])
}

model Variant {
    uuid              String  @id @default(uuid())
    rolloutPercentage Int     @default(100)
    isControl         Boolean
    value             String

    FlagEnvironment              FlagEnvironment? @relation(fields: [flagEnvironmentFlagId, flagEnvironmentEnvironmentId], references: [flagId, environmentId])
    flagEnvironmentFlagId        String?
    flagEnvironmentEnvironmentId String?
}

model PMetric {
    uuid                         String           @id @default(uuid())
    name                         String
    FlagEnvironment              FlagEnvironment? @relation(fields: [flagEnvironmentFlagId, flagEnvironmentEnvironmentId], references: [flagId, environmentId])
    flagEnvironmentFlagId        String?
    flagEnvironmentEnvironmentId String?
    PMetricHit                   PMetricHit[]
}

model PMetricHit {
    id                           Int              @id @default(autoincrement())
    date                         DateTime         @default(now())
    data                         String?
    FlagEnvironment              FlagEnvironment? @relation(fields: [flagEnvironmentFlagId, flagEnvironmentEnvironmentId], references: [flagId, environmentId])
    flagEnvironmentFlagId        String?
    flagEnvironmentEnvironmentId String?
    metric                       PMetric          @relation(fields: [pMetricUuid], references: [uuid])
    pMetricUuid                  String
}

model FlagHit {
    id                           Int             @id @default(autoincrement())
    date                         DateTime        @default(now())
    flagEnvironment              FlagEnvironment @relation(fields: [flagEnvironmentFlagId, flagEnvironmentEnvironmentId], references: [flagId, environmentId])
    flagEnvironmentFlagId        String
    flagEnvironmentEnvironmentId String
    status                       String
}

model RolloutStrategy {
    uuid String @id @default(uuid())
    name String

    // strategy rule
    strategyRuleType String // available values in modules/strategies/types/SrategyRule
    // related to strategy type "field"
    fieldName        String?
    fieldComparator  String?
    fieldValue       String?

    // Relations
    FlagEnvironment              FlagEnvironment? @relation(fields: [flagEnvironmentFlagId, flagEnvironmentEnvironmentId], references: [flagId, environmentId])
    flagEnvironmentFlagId        String?
    flagEnvironmentEnvironmentId String?
}

model Schedule {
    uuid                         String           @id @default(uuid())
    utc                          DateTime
    rolloutPercentage            Int
    status                       String
    FlagEnvironment              FlagEnvironment? @relation(fields: [flagEnvironmentFlagId, flagEnvironmentEnvironmentId], references: [flagId, environmentId])
    schedulingStatus             String           @default("NOT_RUN")
    flagEnvironmentFlagId        String?
    flagEnvironmentEnvironmentId String?
}

// Alias model, don't touch this one.
// If you need to modify the EnvironmentModel, go into the base.prisma file
model Environment {
    uuid            String            @id @default(uuid())
    flagEnvironment FlagEnvironment[]
}
